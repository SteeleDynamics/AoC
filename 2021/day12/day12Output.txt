rmsteele@Arch:day12$ smlnj day12.sml
Standard ML of New Jersey (64-bit) v110.99.2 [built: Wed Sep 29 16:07:17 2021]
[opening day12.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[library $SMLNJ-LIB/Util/smlnj-lib.cm is stable]
[autoloading done]
val readInput = fn : TextIO.instream -> string list
val delim = fn : char -> bool
val mkEdge = fn : 'a list -> 'a * 'a
structure K : ORD_KEY
structure Dict : ORD_MAP?
val ins = fn :
  (Dict.Key.ord_key * Dict.Key.ord_key) * Dict.Key.ord_key list Dict.map
   -> Dict.Key.ord_key list Dict.map
val isSmall = fn : string -> bool
val eq = fn : string * string -> bool
val findPaths1 = fn : Dict.Key.ord_key list Dict.map -> int Dict.map
val findPaths1' = fn :
  Dict.Key.ord_key list Dict.map
   -> int Dict.map
   -> string -> string -> Dict.Key.ord_key * int Dict.map -> int Dict.map
val input1 =
  [("start","A"),("start","b"),("A","c"),("A","b"),("b","d"),("A","end"),
   ("b","end")] : (string * string) list
val input2 =
  [("dc","end"),("HN","start"),("start","kj"),("dc","start"),("dc","HN"),
   ("LN","dc"),("HN","end"),("kj","sa"),("kj","HN"),("kj","dc")] :
  (string * string) list
val input3 =
  [("fs","end"),("he","DX"),("fs","he"),("start","DX"),("pj","DX"),
   ("end","zg"),("zg","sl"),("zg","pj"),("pj","he"),("RW","he"),("fs","DX"),
   ("pj","RW"),("zg","RW"),("start","pj"),("he","WI"),("zg","he"),...] :
  (string * string) list
val input =
  [("QF","bw"),("end","ne"),("po","ju"),("QF","lo"),("po","start"),
   ("XL","ne"),("bw","US"),("ne","lo"),("nu","ne"),("bw","po"),("QF","ne"),
   ("ne","ju"),("start","lo"),("lo","XL"),("QF","ju"),("end","ju"),...] :
  (string * string) list
val Adj1 = - : Dict.Key.ord_key list Dict.map
val Adj2 = - : Dict.Key.ord_key list Dict.map
val Adj3 = - : Dict.Key.ord_key list Dict.map
val Adj = - : Dict.Key.ord_key list Dict.map
val test1_1 = 10 : int
val test2_1 = 19 : int
val test3_1 = 226 : int
val soln23 = 5104 : int
val findPaths2 = fn : Dict.Key.ord_key list Dict.map -> int Dict.map
val findPaths2' = fn :
  Dict.Key.ord_key list Dict.map
   -> int Dict.map
   -> string
   -> string -> bool -> Dict.Key.ord_key * int Dict.map -> int Dict.map
val test1_2 = 36 : int
val test2_2 = 103 : int
val test3_2 = 3509 : int
val soln24 = 149220 : int
-
rmsteele@Arch:day12$
